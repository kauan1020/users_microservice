name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.5.1
          virtualenvs-create: true
          virtualenvs-in-project: false

      - name: List directory structure
        run: ls -la && ls -la tech && find tech -type d | sort

      - name: Install dependencies with Poetry
        working-directory: ./tech
        run: |
          poetry install
          poetry add pytest pytest-cov behave coverage --group dev
          poetry show

      - name: Run unit tests with coverage
        working-directory: ./tech
        run: |
          poetry run pytest tests --cov=tech --cov-report=xml:coverage.xml --cov-report=term

      - name: Run BDD tests with Behave
        working-directory: ./tech
        run: |
          poetry run behave tests/tech/bdd/features

      - name: Move coverage reports to root
        run: |
          if [ -f tech/coverage.xml ]; then
            cp tech/coverage.xml ./coverage.xml
          fi

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@master
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=users_auth_microservice
            -Dsonar.projectName="Users Auth Microservice"
            -Dsonar.sources=tech
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.exclusions=**/__pycache__/**,**/tests/**,**/*.html,**/htmlcov/**,**/.scannerwork/**
            -Dsonar.coverage.exclusions=**/tests/**/*,**/test_*.py,**/__init__.py

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./tech
          file: ./tech/Dockerfile
          push: true
          tags: |
            131793876715.dkr.ecr.us-east-1.amazonaws.com/microservices/users:latest
            131793876715.dkr.ecr.us-east-1.amazonaws.com/microservices/users:${{ github.sha }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            POETRY_VERSION=1.5.1

  deploy:
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name tech-eks-cluster --region us-east-1

      - name: Apply Kubernetes configurations
        run: |
          # Aplicar namespace
          kubectl apply -f tech/k8s/namespace.yaml
          
          # Aplicar configmap
          kubectl apply -f tech/k8s/configmap.yaml
          
          # Aplicar secrets
          kubectl apply -f tech/k8s/secrets.yaml
          
          # Aplicar PVC
          kubectl apply -f tech/k8s/PersistentVolumeClaim.yaml
          
          # Aplicar deployment postgres
          kubectl apply -f tech/k8s/deployment-postgres.yaml
          
          # Aplicar serviço postgres
          kubectl apply -f tech/k8s/postgres-services.yaml
          
          # Aplicar job (se necessário)
          kubectl apply -f tech/k8s/job.yaml
          
          # Aplicar deployment principal
          kubectl set image deployment/users-service users-service=131793876715.dkr.ecr.us-east-1.amazonaws.com/microservices/users:latest -n users || kubectl apply -f tech/k8s/deployment-users.yaml
          
          # Aplicar serviço principal
          kubectl apply -f tech/k8s/service-users.yaml
          
          # Verificar status do rollout
          kubectl rollout status deployment/users-service -n users --timeout=300s